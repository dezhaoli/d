#!/usr/bin/env -S python -u


import argparse
import sys
import re
import subprocess
from subprocess import PIPE

__version__ = '2.1.0'

LOG_LEVELS = 'VDIWEF'
LOG_LEVELS_MAP = dict([(LOG_LEVELS[i], i) for i in range(len(LOG_LEVELS))])
LOG_LEVELS_MAP["NOTICE"] = 2
LOG_LEVELS_MAP["ERROR"] = 4
parser = argparse.ArgumentParser(description='Filter logcat by executable name')
parser.add_argument('executables', nargs='*', help='Application executable name(s)')
parser.add_argument('-w', '--tag-width', metavar='N', dest='tag_width', type=int, default=23, help='Width of log tag')
parser.add_argument('-l', '--min-level', dest='min_level', type=str, choices=LOG_LEVELS+LOG_LEVELS.lower(), default='V', help='Minimum level to be displayed')
parser.add_argument('--always-display-tags', dest='always_tags', action='store_true',help='Always display the tag name')
parser.add_argument('-t', '--tag', dest='tag', action='append', help='Filter output by specified tag(s)')
parser.add_argument('-i', '--ignore-tag', dest='ignored_tag', action='append', help='Filter output by ignoring specified tag(s)')
parser.add_argument('-I', '--ignore-message', dest='ignored_message', action='append', help='Filter output by ignoring specified message(s)')
parser.add_argument('-v', '--version', action='version', version='%(prog)s ' + __version__, help='Print the version number and exit')
parser.add_argument('-a', '--all', dest='all', action='store_true', default=False, help='Print all log messages')

args = parser.parse_args()
min_level = LOG_LEVELS_MAP[args.min_level.upper()]

executables = args.executables


if len(executables) == 0:
  args.all = True

header_size = args.tag_width + 1 + 3 + 1 # space, level, space

stdout_isatty = sys.stdout.isatty()

width = -1
try:
  # Get the current terminal width
  import fcntl, termios, struct
  h, width = struct.unpack('hh', fcntl.ioctl(0, termios.TIOCGWINSZ, struct.pack('hh', 0, 0)))
except:
  pass

BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE = range(8)

RESET = '\033[0m'

def termcolor(fg=None, bg=None):
  codes = []
  if fg is not None: codes.append('3%d' % fg)
  if bg is not None: codes.append('10%d' % bg)
  return '\033[%sm' % ';'.join(codes) if codes else ''

def colorize(message, fg=None, bg=None):
  return termcolor(fg, bg) + message + RESET if stdout_isatty else message

def indent_wrap(message):
  if width == -1:
    return message
  message = message.replace('\t', '    ')
  wrap_area = width - header_size
  messagebuf = ''
  current = 0
  while current < len(message):
    next = min(current + wrap_area, len(message))
    messagebuf += message[current:next]
    if next < len(message):
      messagebuf += '\n'
      messagebuf += ' ' * header_size
    current = next
  return messagebuf


LAST_USED = [RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN]
KNOWN_TAGS = {
  'CFNetwork': WHITE,
  'libnetwork.dylib': WHITE,
}

def allocate_color(tag):
  # this will allocate a unique format for the given tag
  # since we dont have very many colors, we always keep track of the LRU
  if tag not in KNOWN_TAGS:
    KNOWN_TAGS[tag] = LAST_USED[0]
  color = KNOWN_TAGS[tag]
  if color in LAST_USED:
    LAST_USED.remove(color)
    LAST_USED.append(color)
  return color


RULES = {
  # StrictMode policy violation; ~duration=319 ms: android.os.StrictMode$StrictModeDiskWriteViolation: policy=31 violation=1
  re.compile(r'^(StrictMode policy violation)(; ~duration=)(\d+ ms)')
    : r'%s\1%s\2%s\3%s' % (termcolor(RED), RESET, termcolor(YELLOW), RESET),
}



TAGTYPES = {
  'V': colorize(' V ', fg=WHITE, bg=BLACK),
  'D': colorize(' D ', fg=BLACK, bg=BLUE),
  'NOTICE': colorize(' I ', fg=BLACK, bg=GREEN),
  'W': colorize(' W ', fg=BLACK, bg=YELLOW),
  'ERROR': colorize(' E ', fg=BLACK, bg=RED),
  'F': colorize(' F ', fg=BLACK, bg=RED),
}


log_command = ['idevicesyslog']




# This is a ducktype of the subprocess.Popen object
class FakeStdinProcess():
  def __init__(self):
    self.stdout = sys.stdin
  def poll(self):
    return None

if sys.stdin.isatty():
  log_process = subprocess.Popen(log_command, stdin=PIPE, stdout=PIPE)
  #  Sep 18 14:47:49 smoba[324] <Notice>:
  #  May 23 19:46:55 kgcn(UnityFramework)[15870] <Notice>:
  # LOG_LINE = re.compile(r'^([A-Za-z]{3} +\d+ +\d{2}:\d{2}:\d{2}) ([a-zA-Z0-9._:]+)\(?([a-zA-Z0-9._:]*)\)?\[(\d+)\] <([a-zA-Z]+?)>: (.*?)$')
  LOG_LINE = re.compile(r'^([A-Za-z]{3} +\d+ +\d{2}:\d{2}:\d{2}) +(.*?)(\((.*?)\))? ?\[(\d+)] <([a-zA-Z]+?)>: *(.*?)$')
else:
  log_process = FakeStdinProcess()
  #  May 24 17:21:20 iPhone smoba[34755] <Notice>:
  LOG_LINE  = re.compile(r'^([A-Za-z]{3} +\d+ +\d{2}:\d{2}:\d{2}) iPhone ([a-zA-Z0-9._:]+)\(?([a-zA-Z0-9._:]*)\)?\[(\d+)\] <([a-zA-Z]+?)>: (.*?)$')
  # print( "FakeStdinProcess")
pids = set()


for executable in executables:
  pids.add(executable )

if args.all:
  print( "watching all")
else:
  print( "watching: [" + ",".join(pids) + "] with log regex:" + LOG_LINE.pattern)



last_tag = None
app_pid = None



def tag_in_tags_regex(tag, tags):
  return any(re.match(r'^' + t + r'$', tag) for t in map(str.strip, tags))
def msg_in_msgs_regex(msg, msgs):
  return any(re.match( r'^' + m + r'$', msg) for m in msgs)

time, owner, tag, ownerid, level, message='','','','','', ''
while log_process.poll() is None:
  try:
    line = log_process.stdout.readline().decode('utf-8', 'replace').strip()
  except KeyboardInterrupt:
    break
  if len(line) == 0:
    continue

  # bug_line = BUG_LINE.match(line)
  # if bug_line is not None:
  #   continue

  log_line = LOG_LINE.match(line)
  if log_line is not None:
    is_continues_line=False
    time, owner, _, tag, ownerid, level, message = log_line.groups()
  else:
    is_continues_line=True
    message=line
  

  level = level.upper()
  if tag == None:
    tag = "Unity"
  tag = tag.strip()

  # print "level: %s, tag: %s, owner: %s, message: %s " % (level, tag, owner, message)


  if not args.all and owner not in pids:
    continue
  if level in LOG_LEVELS_MAP and LOG_LEVELS_MAP[level] < min_level:
    continue
  if args.ignored_tag and tag_in_tags_regex(tag, args.ignored_tag):
    continue
  if args.ignored_message and msg_in_msgs_regex(message, args.ignored_message):
    continue
  if args.tag and not tag_in_tags_regex(tag, args.tag):
    continue

  linebuf = ''

  if args.tag_width > 0:
    # right-align tag title and allocate color if needed
    if tag != last_tag or args.always_tags:
      last_tag = tag
      color = allocate_color(tag)
      tag = tag[-args.tag_width:].rjust(args.tag_width)
      linebuf += colorize(tag, fg=color)
    else:
      linebuf += ' ' * args.tag_width
    linebuf += ' '
  # write out level colored edge
  if level in TAGTYPES:
    linebuf += TAGTYPES[level]
  else:
    linebuf += ' ' + level + ' '
  linebuf += ' '

  # format tag message using rules
  for matcher in RULES:
    replace = RULES[matcher]
    message = matcher.sub(replace, message)

  linebuf += indent_wrap(message)
  print(linebuf.encode('utf-8'))
