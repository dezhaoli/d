#!/usr/bin/env -S bash
###########################################################
# @Author: dezhaoli@tencent.com
# @Date:   
# Please contact dezhaoli if you have any questions.
###########################################################
. "$(which d)"


_svn(){

	if (($svn_head_num>0));then
		"$SVN" $svn_auth "$@" | head -n $svn_head_num
		((${PIPESTATUS[0]}==0)) || return 1
	else
		"$SVN" $svn_auth "$@"
		(($?==0)) || return 1
	fi
}


# #@ alias="" help="ignore files. files are seperated by ":", e.g. f1:f2"
# function ignore(){
# 	for f; do
# 		d=`dirname "$f"`
# 		b=`basename "$f"`
# 		ignore=`_svn propget svn:ignore "$d" 2>/dev/null`
# 		if [ -n "$ignore" ]; then
# 		    ignore="$ignore
# "
# 		fi
# 		ignore="$ignore$b"
# 		_svn propset svn:ignore "$ignore" "$d"
# 	done
# }


#@ alias="" help="filter [?] files"
function add()
{
	# _svn st | grep "^?" | sed 's/^.\{8\}//' |tr '\n' '\0'| xargs -0r _svn add
	_svn st | grep "^?" | sed 's/^.\{8\}//' |while read f ;do _svn add "$f"@ ; done
}


#@ alias="" help="filter [!] files"
function del()
{
	# _svn st | grep "^!" | sed 's/^.\{8\}//' |tr '\n' '\0'| xargs -0r _svn del
	_svn st | grep "^!" | sed 's/^.\{8\}//' |while read f ;do _svn del "$f"@ ; done
}

#@ alias="" help=""
function co()
{
	_svn co "$url" "$ws" -r "$revision"
}

#@ alias="" help=""
function ci()
{
	_svn commit .  -m "$message"
}

#@ alias="" help="filter [ADM] files"
function batch-ci()
{
	local num=1000		#@ 
	____ "$@"

	local i=0 j=1
	logdir=/tmp/xsvn_commit_log
	mkdir -p $logdir
	rm -fr $logdir/*
	while read f ;do 
		if [[ -e "$f" ]] ; then  
			i=$(( $i + 1 ))
			echo "$f"@ >> $logdir/t$j.txt
			if (( $i > $num )) ; then
				_svn commit  --targets $logdir/t$j.txt --depth empty -m "$message"
				i=0
				j=$(( $j + 1 ))
			fi
			
		fi
	done< <(_svn st | grep "^[ADM]" | sed 's/^.\{8\}//')

	state=$(_svn st | grep "^[ADM]")
	if [[ -n "$state" ]]; then
		_svn commit .  -m "$message"
	fi
}


#@ alias="up" help="update with theirs-full"
function update()
{
	_svn update . --depth infinity --accept theirs-full --force -r "$revision"
}

#@ alias="" help=""
function cleanup()
{
	_svn cleanup . 
}

#@ alias="" help="filter [M] files"
function revert_modify()
{
	_svn st | grep "^M" | sed 's/^.\{8\}//' |while read f ;do _svn revert "$f"@ ; done
}

#@ alias="" help="filter [ADM] files"
function revert_all()
{
	_svn revert -R .
}
#@ alias="" help=""
function rm_unversioned()
{
	local dir="${1:-.}"							#@
	_svn cleanup --remove-unversioned "$dir"
}


#@ alias="" help="filter [X] files, then revert_all and rm_unversioned and up"
revert_external(){
	while read dir
	do
		_svn revert -R "$dir"
		rm_unversioned "$dir"
		_svn up "$dir"
	done< <(_svn st | grep "Performing status" |sed  "s/.*'\([^']*\)'.*/\1/")
}



#@ alias="" help="filter [?] files, and ignore them"
function ignore_new_file()
{
	while read f; do
		d=`dirname "$f"`
		b=`basename "$f"`
		ignore=`_svn propget svn:ignore "$d" 2>/dev/null`
		if [ -n "$ignore" ]; then
		    ignore="$ignore
"
		fi
		ignore="$ignore$b"
		_svn propset svn:ignore "$ignore" "$d"
	done< <(_svn status | grep '^?' | sed 's/^? *//')
}


#@ alias="sw" help=""
function switch()
{
	_svn switch --ignore-ancestry "$url" . -r "$revision" --accept "tf"
}

#@ alias="sw-ig-e" help=""
function switch_ignore_externals()
{
	_svn switch --ignore-ancestry "$url" . -r "$revision" --accept "tf" --ignore-externals
}

# XARGPARES_DEBUG=true



#@ 
function _main(){
	svn_auth=									#@ --auth;
	credential=									#@ --credential; help='e.g. username:password'
	revision=HEAD								#@ -r; --revision;
	url=										#@ --url;
	message="auto upload by $(basename $0)"		#@ -m; --message;
	svn_head_num=0 								#@ --num;

	ws=""										#@ 
	cmds=()										#@ nargs='+'; choices=( add del ci co up cleanup sw switch sw-ig-e revert_modify revert_all rm_unversioned batch_ci ignore_new_file )
	____ "$@"

	if [[ -n "$credential" ]]; then
		local username=${credential%:*}
		local password=${credential#*:}
		svn_auth="--username $username --password $password"
	fi


	[[ -d "$ws" ]] || die "the workspace [$ws] does not exist!"

	cd "$ws"


	echo "$(basename $0) $*"

	SVN=svn
	if [[ "$OSTYPE" == cygwin ]]; then
		p=$(whereis svn | sed -E 's#.*(/cygdrive/.*/svn.exe).*#\1#')
		SVN=$(cygpath -am "$p")
	fi


	for cmd in "${cmds[@]}"
	do
		_xargparse_real_subcmd cmd
		$cmd
		(( $? != 0 )) && error $cmd
	done

}



main "$@"

exit 0